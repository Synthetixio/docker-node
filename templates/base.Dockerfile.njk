{%- if distro === "alpine" %}
FROM {{ distro }}:{{ alpineVersion }}@sha256:{{ alpineSha256 }}
{%- elif distro === "ubuntu" %}
FROM {{ distro }}:{{ ubuntuVersion }}@sha256:{{ ubuntuSha256 }}
{%- elif distro === "debian" %}
FROM {{ distro }}:{{ debianVersion }}@sha256:{{ debianSha256 }}
{%- endif %}

############### ENV SETUP ###############
# husky workaround - https://github.com/typicode/husky/issues/821
ENV HUSKY 0
ENV HUSKY_SKIP_INSTALL 1
# always behave as CI
ENV CI true
# disable next.js telemetry
ENV NEXT_TELEMETRY_DISABLED 1
# no interactive frontend during docker build
ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true
# good colors for most applications
ENV TERM xterm

############### INSTALL DEPS ###############
{%- if distro === "alpine" %}
RUN apk add --no-cache \
    libstdc++ \
    py3-pip \
    py3-setuptools \
    libgcc \
    linux-headers \
    tar \
    # mozjpeg dependencies
    tiff \
    jpeg \
    zlib \
    zlib-dev \
    coreutils \
    openssh \
{%- elif distro === "ubuntu" or distro === "debian" %}
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    locales \
    software-properties-common \
    python3-distutils \
    python3-apt \
    python3-dev \
    python3-pip \
    build-essential \
    openssh-server \
    # mozjpeg dependencies
{%- endif %}
    autoconf \
    automake \
    libtool \
    pkgconf \
    nasm \
    file \
    musl-dev \
    # end of mozjpeg dependencies
    curl \
    python3 \
    make \
    g++ \
    gcc \
    git \
    clang \
    unzip \
    wget \
    binutils-gold \
    gnupg \
{%- if distro === "ubuntu" or distro === "debian" %}
    && rm -rf /var/lib/apt/lists/* /var/cache/apt/*
{%- else %}
    && echo "Finished installing packages"
{%- endif %}

{%- if distro === "ubuntu" or distro === "debian" %}
# locale setup
RUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
ENV LANG en_US.utf8

# add local python dir to path
ENV PATH $PATH:/root/.local/bin
{%- endif %}

############### NODE SETUP ###############
# create new node user
{%- if distro === "alpine" %}
RUN addgroup -g 1000 node \
    && adduser -u 1000 -G node -s /bin/sh -D node

# node setup
RUN ARCH= && alpineArch="$(apk --print-arch)" \
    && case "${alpineArch##*-}" in \
    x86_64) \
    ARCH='x64' \
{%- if nodeVersion === "18.19.0" %}
    CHECKSUM="10b7b23b6b867a25f060a433b83f5c3ecb3bcf7cdba1c0ce46443065a832fd41" \
{%- elif nodeVersion === "20.11.0" %}
    CHECKSUM="a8bec39586538896715be7a2ca7ef08727a58ad94d25876c5db11cafacff4c37" \
{%- endif %}
    ;; \
    *) ;; \
    esac \
    && if [ -n "${CHECKSUM}" ]; then \
    set -eu; \
    curl -fsSLO --compressed "https://unofficial-builds.nodejs.org/download/release/v{{ nodeVersion }}/node-v{{ nodeVersion }}-linux-$ARCH-musl.tar.xz"; \
    echo "$CHECKSUM  node-v{{ nodeVersion }}-linux-$ARCH-musl.tar.xz" | sha256sum -c - \
    && tar -xJf "node-v{{ nodeVersion }}-linux-$ARCH-musl.tar.xz" -C /usr/local --strip-components=1 --no-same-owner \
    && ln -s /usr/local/bin/node /usr/local/bin/nodejs; \
    else \
    echo "Building from source" \
    && export GNUPGHOME="$(mktemp -d)" 
    # gpg keys listed at https://github.com/nodejs/node#release-keys
    && for key in \
    4ED778F539E3634C779C87C6D7062848A1AB005C \
    141F07595B7B3FFE74309A937405533BE57C7D57 \
    74F12602B6F1C4E913FAA37AD3A89613643B6201 \
    DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7 \
    61FC681DFB92A079F1685E77973F295594EC4689 \
    8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
    890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 \
    C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C \
    108F52B48DB57BB0CC439B2997B01419BD92F80A \
    A363A499291CBBC940DD62E41F10027AF002F8B0 \
    ; do \
    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; \
    done \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v{{ nodeVersion }}/node-v{{ nodeVersion }}.tar.xz" \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v{{ nodeVersion }}/SHASUMS256.txt.asc" \
    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
    && gpgconf --kill all \
    && rm -rf "$GNUPGHOME" \
    && grep " node-v{{ nodeVersion }}.tar.xz\$" SHASUMS256.txt | sha256sum -c - \
    && tar -xf "node-v{{ nodeVersion }}.tar.xz" \
    && cd "node-v{{ nodeVersion }}" \
    && ./configure \
    && make -j$(getconf _NPROCESSORS_ONLN) V= \
    && make install \
    && cd .. \
    && rm -Rf "node-v{{ nodeVersion }}" \
    && rm "node-v{{ nodeVersion }}.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt; \
    fi \
    && rm -f "node-v{{ nodeVersion }}-linux-$ARCH-musl.tar.xz" \
    && find /usr/local/include/node/openssl/archs -mindepth 1 -maxdepth 1 ! -name "$OPENSSL_ARCH" -exec rm -rf {} \;
{%- elif distro === "ubuntu" or distro === "debian" %}
RUN groupadd --gid 1000 node \
    && useradd --uid 1000 --gid node --shell /bin/bash --create-home node

# node setup
RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
    amd64) ARCH='x64';; \
    ppc64el) ARCH='ppc64le';; \
    s390x) ARCH='s390x';; \
    arm64) ARCH='arm64';; \
    armhf) ARCH='armv7l';; \
    i386) ARCH='x86';; \
    *) echo "unsupported architecture"; exit 1 ;; \
    esac \
    && export GNUPGHOME="$(mktemp -d)" \
    # gpg keys listed at https://github.com/nodejs/node#release-keys
    && set -ex \
    && for key in \
    4ED778F539E3634C779C87C6D7062848A1AB005C \
    141F07595B7B3FFE74309A937405533BE57C7D57 \
    74F12602B6F1C4E913FAA37AD3A89613643B6201 \
    DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7 \
    61FC681DFB92A079F1685E77973F295594EC4689 \
    8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
    890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 \
    C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C \
    108F52B48DB57BB0CC439B2997B01419BD92F80A \
    A363A499291CBBC940DD62E41F10027AF002F8B0 \
    ; do \
    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; \
    done \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v{{ nodeVersion }}/node-v{{ nodeVersion }}-linux-$ARCH.tar.xz" \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v{{ nodeVersion }}/SHASUMS256.txt.asc" \
    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
    && gpgconf --kill all \
    && rm -rf "$GNUPGHOME" \
    && grep " node-v{{ nodeVersion }}-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c - \
    && tar -xJf "node-v{{ nodeVersion }}-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner \
    && rm "node-v{{ nodeVersion }}-linux-$ARCH.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt \
    && ln -s /usr/local/bin/node /usr/local/bin/nodejs
{%- endif %}

# avoid million NPM install messages
ENV npm_config_loglevel warn

# allow installing when the main user is root
ENV npm_config_unsafe_perm true

# install latest npm, regardless of node version, for speed and fixes
RUN npm install -g npm@{{ npmVersion }}

RUN node --version \
    && npm --version

# lock dependencies by default
RUN npm config set save-exact=true

############### YARN SETUP ###############
RUN set -ex \
    && export GNUPGHOME="$(mktemp -d)" \
    && for key in \
    6A010C5166006599AA17F08146C2130DFD2497F5 \
    ; do \
    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; \
    done \
    && curl -fsSLO --compressed "https://yarnpkg.com/downloads/{{ yarnVersion }}/yarn-v{{ yarnVersion }}.tar.gz" \
    && curl -fsSLO --compressed "https://yarnpkg.com/downloads/{{ yarnVersion }}/yarn-v{{ yarnVersion }}.tar.gz.asc" \
    && gpg --batch --verify yarn-v{{ yarnVersion }}.tar.gz.asc yarn-v{{ yarnVersion }}.tar.gz \
    && gpgconf --kill all \
    && rm -rf "$GNUPGHOME" \
    && mkdir -p /opt \
    && tar -xzf yarn-v{{ yarnVersion }}.tar.gz -C /opt/ \
    && ln -s /opt/yarn-v{{ yarnVersion }}/bin/yarn /usr/local/bin/yarn \
    && ln -s /opt/yarn-v{{ yarnVersion }}/bin/yarnpkg /usr/local/bin/yarnpkg \
    && rm yarn-v{{ yarnVersion }}.tar.gz.asc yarn-v{{ yarnVersion }}.tar.gz
RUN yarn --version

# pm2 setup
RUN npm install -g pm2@{{ pm2Version }}

# pnpm setup
RUN npm install -g pnpm@{{ pnpmVersion }}

# turbo setup
RUN npm install -g turbo@{{ turboVersion }}

############### WRAPPING UP ###############
COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["node"]
